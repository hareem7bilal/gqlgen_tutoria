package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"gqlgen_tutorial/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo:= &model.Todo{
				ID:   fmt.Sprint(len(r.TodosList)+1),
				Text: input.Text,
				Done: false,
				User: &model.User{
					ID:   input.UserID,
					Name: fmt.Sprintf("Elmo%s", fmt.Sprint(len(r.TodosList)+1)),
				},
			}

r.TodosList = append(r.TodosList, todo)

	//panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.TodosList, nil

	 
	// []*model.Todo{
	// 	{
	// 		ID:   "123",
	// 		Text: "Task 1",
	// 		Done: false,
	// 		User: &model.User{
	// 			ID:   "User1",
	// 			Name: "Elmo",
	// 		},
	// 	},
	// 	{
	// 		ID:   "456",
	// 		Text: "Task 2",
	// 		Done: false,
	// 		User: &model.User{
	// 			ID:   "User2",
	// 			Name: "Elma",
	// 		},
	// 	},
	// }, 
	
}


// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
